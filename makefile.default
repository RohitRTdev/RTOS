CC := x86_64-w64-mingw32-gcc
AS := x86_64-w64-mingw32-as
LD := x86_64-w64-mingw32-ld

ACTIVEDIR :=$(TOPDIR)/$(subst $(WORKINGDIR)/,,$(CURDIR))
LIB_HEADER =
CFLAGS =-c -ffreestanding -mno-red-zone $(INCLUDE)
ASFLAGS =-c    
LDFLAGS =-nostdlib -T$(LDSCRIPTS) --image-base=0 --gc-sections -dll -shared --subsystem $(SUBSYSTEM) -e $(MODULE_ENTRY)
LIBFLAGS :=-rcs

ifeq ($(ACTIVEDIR),$(TOPDIR)/kernel)
    LIB_HEADER =-I../lib/rclib/include
    SUBSYSTEM :=0
    MODULE_ENTRY :=kernel_entry
	LDFLAGS +=-s
endif
ifeq ($(ACTIVEDIR),$(TOPDIR)/boot)
    LIB_HEADER =-I../lib/refi/include 
    SUBSYSTEM :=10
    MODULE_ENTRY :=efi_main
endif
ifeq ($(ACTIVEDIR),$(TOPDIR)/lib/refi)
    LIB_HEADER =-I../../boot/include/
endif

LDFLAGS +=-o
INCLUDE = -Iinclude/ $(LIB_HEADER)

SRC :=$(filter-out include*/*.*,$(wildcard *.c *.s */*.c */*.s)) #Collect all .c and .s files
OBJS :=$(patsubst %.c,%.o, $(patsubst %.s,%.o,$(SRC))) #Convert to .o files

#Default rule for compiling .c files
%.o: %.c
	@echo "$(GREEN)$(BOLD)Compiling$(END) $(GREEN)file $(ACTIVEDIR)/$<$(END)"
	@$(CC) $(CFLAGS) $< -o $@

#Default rule for assembling .s files
%.o: %.s
	@echo "$(YELLOW)$(BOLD)Assembling$(END) $(YELLOW)file $(ACTIVEDIR)/$<$(END)"
	@$(AS) $(ASFLAGS) $< -o $@

build-objects: $(OBJS)

.PHONY: clean very-clean
clean:
	@echo "$(RED)$(BOLD)Deleting intermediate files in $(ACTIVEDIR)$(END)"
	@rm -rf $(COBJS) $(SOBJS)

very-clean: clean
	@echo "$(RED)$(BOLD)Deleting $(TARGET)$(END)"
	@rm -rf $(TARGET)